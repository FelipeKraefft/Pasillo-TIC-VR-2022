//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/Teclado.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Teclado : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Teclado()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Teclado"",
    ""maps"": [
        {
            ""name"": ""Control_Auto"",
            ""id"": ""f53a1e69-3d28-4840-82a6-bdc680a4671c"",
            ""actions"": [
                {
                    ""name"": ""Conducir"",
                    ""type"": ""Value"",
                    ""id"": ""0bf4183d-c849-4ba5-8df2-2567698c30c0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""9b884a8b-a3a6-4c44-b14a-854ec3c1501e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""21b237bb-3393-4c16-831f-a2f6772ba928"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1515b732-e598-44ae-8bfa-8fe1e324001b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Conducir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4195df22-c9de-40a1-a809-44f0c372f533"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Conducir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bd6720bd-6fb1-4cca-bd65-5a8c3ff79465"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Conducir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f2cd50ff-0429-4274-be65-2f86b67e8280"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Conducir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""de9c4c34-3647-4261-a80c-9ef7dbda9d77"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Conducir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Control_Auto
        m_Control_Auto = asset.FindActionMap("Control_Auto", throwIfNotFound: true);
        m_Control_Auto_Conducir = m_Control_Auto.FindAction("Conducir", throwIfNotFound: true);
        m_Control_Auto_Menu = m_Control_Auto.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control_Auto
    private readonly InputActionMap m_Control_Auto;
    private IControl_AutoActions m_Control_AutoActionsCallbackInterface;
    private readonly InputAction m_Control_Auto_Conducir;
    private readonly InputAction m_Control_Auto_Menu;
    public struct Control_AutoActions
    {
        private @Teclado m_Wrapper;
        public Control_AutoActions(@Teclado wrapper) { m_Wrapper = wrapper; }
        public InputAction @Conducir => m_Wrapper.m_Control_Auto_Conducir;
        public InputAction @Menu => m_Wrapper.m_Control_Auto_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Control_Auto; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Control_AutoActions set) { return set.Get(); }
        public void SetCallbacks(IControl_AutoActions instance)
        {
            if (m_Wrapper.m_Control_AutoActionsCallbackInterface != null)
            {
                @Conducir.started -= m_Wrapper.m_Control_AutoActionsCallbackInterface.OnConducir;
                @Conducir.performed -= m_Wrapper.m_Control_AutoActionsCallbackInterface.OnConducir;
                @Conducir.canceled -= m_Wrapper.m_Control_AutoActionsCallbackInterface.OnConducir;
                @Menu.started -= m_Wrapper.m_Control_AutoActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_Control_AutoActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_Control_AutoActionsCallbackInterface.OnMenu;
            }
            m_Wrapper.m_Control_AutoActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Conducir.started += instance.OnConducir;
                @Conducir.performed += instance.OnConducir;
                @Conducir.canceled += instance.OnConducir;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }
        }
    }
    public Control_AutoActions @Control_Auto => new Control_AutoActions(this);
    public interface IControl_AutoActions
    {
        void OnConducir(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
